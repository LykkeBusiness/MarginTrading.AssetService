using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using Newtonsoft.Json;

namespace MarginTrading.AssetService.Contracts.LegacyAsset
{
    [Serializable]
    public class LegacyAssetContract
    {
        private decimal overnightMarginMultiplier;

        [JsonProperty("category")]
        public string CategoryRaw { get; set; }

        [JsonProperty("categoryBottomLevel")]
        public string CategoryBottomLevel
        {
            get => CategoryRaw.Trim('/').Split('/').LastOrDefault();
            set { } // This empty setter is needed for the autogenerated proxy clients to be able to handle the deserialization of responses.
        }

        [JsonProperty("categoryTopLevel")]
        public string CategoryTopLevel
        {
            get => CategoryRaw.Trim('/').Split('/').FirstOrDefault();
            set { } // This empty setter is needed for the autogenerated proxy clients to be able to handle the deserialization of responses.
        }

        [JsonProperty("comments")]
        public string Comments { get; set; }

        [JsonProperty("contractSize")]
        public int ContractSize { get; set; }

        [JsonProperty("expiryDate")]
        public string ExpiryDate { get; set; }

        [JsonProperty("isinLong")]
        public string IsinLong { get; set; }

        [JsonProperty("isinShort")]
        public string IsinShort { get; set; }

        [JsonProperty("issuer")]
        public string Issuer { get; set; }

        [JsonProperty("lastTradingDate")]
        public string LastTradingDate { get; set; }

        [JsonProperty("marketMakerAssetAccountId")]
        public string MarketMakerAssetAccountId { get; set; }

        [JsonProperty("maxOrderSize")]
        public int MaxOrderSize { get; set; }

        [JsonProperty("maxPositionSize")]
        public int MaxPositionSize { get; set; }

        [JsonProperty("minOrderDistancePercent")]
        public decimal MinOrderDistancePercent { get; set; }

        [JsonProperty("minOrderEntryInterval")]
        public decimal MinOrderEntryInterval { get; set; }

        [JsonProperty("minOrderSize")]
        public int MinOrderSize { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("newsId")]
        public string NewsId { get; set; }

        [JsonProperty("productId")]
        public string AssetId { get; set; }

        [JsonProperty("publicationRic")]
        public string PublicationRic { get; set; }

        [JsonProperty("settlementCurrency")]
        public string SettlementCurrency { get; set; }

        [JsonProperty("shortPosition")]
        public bool ShortPosition { get; set; }

        [JsonProperty("tags")]
        public string Tags { get; set; }

        [JsonProperty("tickFormula")]
        public string TickFormulaName { get; set; }

        [JsonProperty("underlyingMdsCode")]
        public string UnderlyingMdsCode { get; set; }

        [JsonProperty("forceId")]
        public string ForceId { get; set; }

        [DefaultValue(1)]
        [JsonProperty("parity", DefaultValueHandling = DefaultValueHandling.Populate)]
        public int Parity { get; set; }

        [JsonProperty("liquidationThresholdQty")]
        public decimal LiquidationThresholdQuantity { get; set; }

        [JsonProperty("overnightMarginMultiplier")]
        public decimal OvernightMarginMultiplier
        {
            get => overnightMarginMultiplier > 1 ? overnightMarginMultiplier : 1;
            set => overnightMarginMultiplier = value;
        }

        /// <summary>
        /// Represents an underlying object.
        /// Mapped from the normalized data after deserialization.
        /// </summary>
        public Underlying Underlying { get; set; }

        /// <summary>
        /// Represents a tick formula object.
        /// Mapped from the normalized data after deserialization.
        /// </summary>
        public TickFormula TickFormulaDetails { get; set; }

        /// <summary>
        /// Gets or sets the DisplayPrecision (accuracy).
        /// It's currently hardcoded as per the requirements.
        /// </summary>
        public int DisplayPrecision { get; set; } = 5;

        public DividendsFactor DividendsFactor { get; set; } = new DividendsFactor();
    }

    [Serializable]
    public class Underlying
    {
        private string _marketId;

        [JsonProperty("almParam")]
        public decimal AlmParam { get; set; }

        [JsonProperty("assetType")]
        public string AssetType { get; set; }

        [JsonProperty("cfiCode")]
        public string CfiCode { get; set; }

        [JsonProperty("eligible871m")]
        public bool Eligible871m { get; set; }

        [JsonProperty("hedgeCost")]
        public decimal HedgeCost { get; set; }

        [JsonProperty("isin")]
        public string Isin { get; set; }

        [JsonProperty("market")]
        public string MarketId
        {
            get => MarketDetails?.MarketId ?? _marketId;
            set => _marketId = value;
        }

        [JsonProperty("maturityDate")]
        public string MaturityDate { get; set; }

        [JsonProperty("mdsCode")]
        public string MdsCode { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("repoSurchargePercent")]
        public decimal RepoSurchargePercent { get; set; }

        [JsonProperty("ricCode")]
        public string RicCode { get; set; }

        [JsonProperty("spread")]
        public decimal Spread { get; set; }

        [JsonProperty("tradingCurrency")]
        public string TradingCurrency { get; set; }

        [JsonProperty("variableInterestRate")]
        public string VariableInterestRate { get; set; }

        [JsonProperty("variableInterestRate1")]
        public string VariableInterestRate1 { get; set; }

        [JsonProperty("variableInterestRate2")]
        public string VariableInterestRate2 { get; set; }

        [JsonProperty("CommodityBase")]
        public string CommodityBase { get; set; }

        [JsonProperty("CommodityDetails")]
        public string CommodityDetails { get; set; }

        [JsonProperty("BaseCurrency")]
        public string BaseCurrency { get; set; }

        [JsonProperty("IndexName")]
        public string IndexName { get; set; }

        [JsonProperty("EMIRType")]
        public string EMIRType { get; set; }

        /// <summary>
        /// Represents a market object.
        /// Mapped from the normalized data after deserialization.
        /// </summary>
        public Market MarketDetails { get; set; }

        /// <summary>
        /// Represents an execution fee parameters object.
        /// Mapped from the normalized data after deserialization.
        /// </summary>
        public ExecutionFeeParameter ExecutionFeeParameter { get; set; }

        /// <summary>
        /// Represents a collection of interest rate objects.
        /// Mapped from the normalized data after deserialization.
        /// </summary>
        public List<InterestRate> InterestRates { get; set; }

        /// <summary>
        /// Represents the margin rate.
        /// Mapped from the normalized data after deserialization.
        /// </summary>
        [JsonProperty("marginRate")]
        public decimal? MarginRate { get; set; }

        /// <summary>
        /// Represents the financing fix rate.
        /// Mapped from the normalized data after deserialization.
        /// </summary>
        public decimal FinancingFixRate { get; set; }

        [JsonProperty("Keywords")]
        public string Keywords { get; set; }

        [JsonIgnore]
        public string[] KeywordsArray =>
            !string.IsNullOrEmpty(Keywords) ? Keywords.Split(',').ToArray() : Array.Empty<string>();

        [JsonProperty("dividendsFactor")]
        public DividendsFactor DividendsFactor { get; set; } = new DividendsFactor();
    }

    [Serializable]
    public class InterestRate
    {
        [JsonProperty("currency")]
        public string Currency { get; set; }

        [JsonProperty("mdsCode")]
        public string MdsCode { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        public override bool Equals(object value)
        {
            return Equals(value as InterestRate);
        }

        public bool Equals(InterestRate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                String.Equals(Currency, other.Currency) &&
                String.Equals(MdsCode, other.MdsCode) &&
                String.Equals(Name, other.Name);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                const int HashingBase = (int)2166136261;
                const int HashingMultiplier = 16777619;

                int hash = HashingBase;
                hash = (hash * HashingMultiplier) ^ (!ReferenceEquals(null, Currency) ? Currency.GetHashCode() : 0);
                hash = (hash * HashingMultiplier) ^ (!ReferenceEquals(null, MdsCode) ? MdsCode.GetHashCode() : 0);
                hash = (hash * HashingMultiplier) ^ (!ReferenceEquals(null, Name) ? Name.GetHashCode() : 0);
                return hash;
            }
        }

        public static bool operator ==(InterestRate obj, InterestRate other)
        {
            if (ReferenceEquals(obj, other)) return true;
            if (ReferenceEquals(null, obj)) return false;
            return (obj.Equals(other));
        }

        public static bool operator !=(InterestRate obj, InterestRate other)
        {
            return !(obj == other);
        }
    }

    [Serializable]
    public class ExecutionFeeParameter
    {
        [JsonProperty("assetType")]
        public string AssetType { get; set; }

        [JsonProperty("commissionCap")]
        public decimal CommissionCap { get; set; }

        [JsonProperty("commissionFloor")]
        public decimal CommissionFloor { get; set; }

        [JsonProperty("currency")]
        public string Currency { get; set; }

        [JsonProperty("ratePercent")]
        public decimal RatePercent { get; set; }
    }

    [Serializable]
    public class Market
    {
        [JsonProperty("calendar")]
        public Calendar Calendar { get; set; }

        [JsonProperty("marketHours")]
        public MarketHours MarketHours { get; set; }

        [JsonProperty("marketId")]
        public string MarketId { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("dividendsFactor")]
        public DividendsFactor DividendsFactor { get; set; }
    }

    [Serializable]
    public class TickFormula
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("params")]
        public TickFormulaParameters TickFormulaParameters { get; set; }
    }

    [Serializable]
    public class TickFormulaParameters
    {
        [JsonProperty("ladders")]
        public List<decimal> Ladders { get; set; }

        [JsonProperty("values")]
        public List<decimal> Values { get; set; }
    }

    [Serializable]
    public class DividendsFactor
    {
        [JsonProperty("shortPercent")]
        public decimal ShortPercent { get; set; }

        [JsonProperty("percent")]
        public decimal Percent { get; set; }

        [JsonProperty("us871Percent")]
        public decimal Us871Percent { get; set; }
    }

    [Serializable]
    public class Calendar
    {
        [JsonProperty("holidays")]
        public List<DateTime> Holidays { get; set; }
    }

    [Serializable]
    public class MarketHours
    {
        [JsonProperty("close")]
        public TimeSpan Close { get; set; }

        [JsonProperty("day")]
        public DateTime Day { get; set; }

        [JsonProperty("open")]
        public TimeSpan Open { get; set; }
    }
}
